<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:converter="clr-namespace:SDPromptTool.ViewModel.Converter"
					xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2">

	<!--#region TabItemStyle1 & UniComboBoxStyle-->
	<Style x:Key="FocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="2"
							   StrokeDashArray="1 2"
							   Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
							   SnapsToDevicePixels="true"
							   StrokeThickness="1" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<LinearGradientBrush x:Key="TabItem.Static.Background"
						 EndPoint="0,1"
						 StartPoint="0,0">
		<GradientStop Color="#F0F0F0"
					  Offset="0.0" />
		<GradientStop Color="#E5E5E5"
					  Offset="1.0" />
	</LinearGradientBrush>
	<SolidColorBrush x:Key="TabItem.Static.Border"
					 Color="#ACACAC" />
	<SolidColorBrush x:Key="TabItem.MouseOver.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="TabItem.MouseOver.Border"
					 Color="BlueViolet" />
	<SolidColorBrush x:Key="TabItem.Selected.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="TabItem.Selected.Border"
					 Color="CornflowerBlue" />
	<SolidColorBrush x:Key="TabItem.Disabled.Background"
					 Color="DarkGray" />
	<SolidColorBrush x:Key="TabItem.Disabled.Border"
					 Color="Gray" />
	<SolidColorBrush x:Key="TextBox.Static.Background"
					 Color="#FFFFFFFF" />
	<Style x:Key="ComboBoxEditableTextBox"
		   TargetType="{x:Type TextBox}">
		<Setter Property="OverridesDefaultStyle"
				Value="true" />
		<Setter Property="AllowDrop"
				Value="true" />
		<Setter Property="MinWidth"
				Value="0" />
		<Setter Property="MinHeight"
				Value="0" />
		<Setter Property="FocusVisualStyle"
				Value="{x:Null}" />
		<Setter Property="ScrollViewer.PanningMode"
				Value="VerticalFirst" />
		<Setter Property="Stylus.IsFlicksEnabled"
				Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<ScrollViewer x:Name="PART_ContentHost"
								  Background="Transparent"
								  Focusable="false"
								  HorizontalScrollBarVisibility="Hidden"
								  VerticalScrollBarVisibility="Hidden" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<SolidColorBrush x:Key="ComboBox.Static.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.Static.Border"
					 Color="CornflowerBlue" />
	<SolidColorBrush x:Key="ComboBox.Static.Glyph"
					 Color="AntiqueWhite" />
	<SolidColorBrush x:Key="ComboBox.Static.Editable.Background"
					 Color="#FFFFFFFF" />
	<SolidColorBrush x:Key="ComboBox.Static.Editable.Border"
					 Color="#FFABADB3" />
	<SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.MouseOver.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.MouseOver.Border"
					 Color="BlueViolet" />
	<SolidColorBrush x:Key="ComboBox.MouseOver.Glyph"
					 Color="Lime" />
	<SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background"
					 Color="#FFFFFFFF" />
	<SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border"
					 Color="#FF7EB4EA" />
	<LinearGradientBrush x:Key="ComboBox.MouseOver.Editable.Button.Background"
						 EndPoint="0,1"
						 StartPoint="0,0">
		<GradientStop Color="#FFEBF4FC"
					  Offset="0.0" />
		<GradientStop Color="#FFDCECFC"
					  Offset="1.0" />
	</LinearGradientBrush>
	<SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border"
					 Color="#FF7EB4EA" />
	<SolidColorBrush x:Key="ComboBox.Pressed.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.Pressed.Border"
					 Color="Violet" />
	<SolidColorBrush x:Key="ComboBox.Pressed.Glyph"
					 Color="#FF000000" />
	<SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background"
					 Color="#FFFFFFFF" />
	<SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border"
					 Color="#FF569DE5" />
	<LinearGradientBrush x:Key="ComboBox.Pressed.Editable.Button.Background"
						 EndPoint="0,1"
						 StartPoint="0,0">
		<GradientStop Color="#FFDAEBFC"
					  Offset="0.0" />
		<GradientStop Color="#FFC4E0FC"
					  Offset="1.0" />
	</LinearGradientBrush>
	<SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border"
					 Color="#FF569DE5" />
	<SolidColorBrush x:Key="ComboBox.Disabled.Background"
					 Color="#FFF0F0F0" />
	<SolidColorBrush x:Key="ComboBox.Disabled.Border"
					 Color="#FFD9D9D9" />
	<SolidColorBrush x:Key="ComboBox.Disabled.Glyph"
					 Color="#FFBFBFBF" />
	<SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background"
					 Color="#FFFFFFFF" />
	<SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border"
					 Color="#FFBFBFBF" />
	<SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border"
					 Color="Transparent" />
	<Style x:Key="ComboBoxToggleButton"
		   TargetType="{x:Type ToggleButton}">
		<Setter Property="OverridesDefaultStyle"
				Value="true" />
		<Setter Property="IsTabStop"
				Value="false" />
		<Setter Property="Focusable"
				Value="false" />
		<Setter Property="ClickMode"
				Value="Press" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="templateRoot"
							Background="{StaticResource ComboBox.Static.Background}"
							BorderBrush="{StaticResource ComboBox.Static.Border}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="true">
						<Border x:Name="splitBorder"
								BorderBrush="Transparent"
								BorderThickness="1"
								HorizontalAlignment="Right"
								Margin="0"
								SnapsToDevicePixels="true"
								Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
							<Path x:Name="arrow"
								  Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"
								  Fill="{StaticResource ComboBox.Static.Glyph}"
								  HorizontalAlignment="Center"
								  Margin="0"
								  VerticalAlignment="Center" />
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
										   Value="true" />
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
										   Value="false" />
								<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
										   Value="false" />
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
										   Value="true" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Static.Editable.Background}" />
							<Setter Property="BorderBrush"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Static.Editable.Border}" />
							<Setter Property="Background"
									TargetName="splitBorder"
									Value="{StaticResource ComboBox.Static.Editable.Button.Background}" />
							<Setter Property="BorderBrush"
									TargetName="splitBorder"
									Value="{StaticResource ComboBox.Static.Editable.Button.Border}" />
						</MultiDataTrigger>
						<Trigger Property="IsMouseOver"
								 Value="true">
							<Setter Property="Fill"
									TargetName="arrow"
									Value="{StaticResource ComboBox.MouseOver.Glyph}" />
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
										   Value="true" />
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
										   Value="false" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.MouseOver.Background}" />
							<Setter Property="BorderBrush"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.MouseOver.Border}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
										   Value="true" />
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
										   Value="true" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.MouseOver.Editable.Background}" />
							<Setter Property="BorderBrush"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.MouseOver.Editable.Border}" />
							<Setter Property="Background"
									TargetName="splitBorder"
									Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}" />
							<Setter Property="BorderBrush"
									TargetName="splitBorder"
									Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}" />
						</MultiDataTrigger>
						<Trigger Property="IsPressed"
								 Value="true">
							<Setter Property="Fill"
									TargetName="arrow"
									Value="{StaticResource ComboBox.Pressed.Glyph}" />
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
										   Value="true" />
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
										   Value="false" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Pressed.Background}" />
							<Setter Property="BorderBrush"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Pressed.Border}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
										   Value="true" />
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
										   Value="true" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Pressed.Editable.Background}" />
							<Setter Property="BorderBrush"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Pressed.Editable.Border}" />
							<Setter Property="Background"
									TargetName="splitBorder"
									Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}" />
							<Setter Property="BorderBrush"
									TargetName="splitBorder"
									Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}" />
						</MultiDataTrigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Fill"
									TargetName="arrow"
									Value="{StaticResource ComboBox.Disabled.Glyph}" />
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
										   Value="false" />
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
										   Value="false" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Disabled.Background}" />
							<Setter Property="BorderBrush"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Disabled.Border}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
										   Value="false" />
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
										   Value="true" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Disabled.Editable.Background}" />
							<Setter Property="BorderBrush"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Disabled.Editable.Border}" />
							<Setter Property="Background"
									TargetName="splitBorder"
									Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}" />
							<Setter Property="BorderBrush"
									TargetName="splitBorder"
									Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}" />
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="ComboBoxEditableTemplate"
					 TargetType="{x:Type ComboBox}">
		<Grid x:Name="templateRoot"
			  SnapsToDevicePixels="true">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
								  Width="0" />
			</Grid.ColumnDefinitions>
			<Popup x:Name="PART_Popup"
				   AllowsTransparency="true"
				   Grid.ColumnSpan="2"
				   IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
				   Placement="Bottom"
				   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
				<theme:SystemDropShadowChrome x:Name="shadow"
											  Color="Transparent"
											  MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
											  MaxHeight="{TemplateBinding MaxDropDownHeight}">
					<Border x:Name="dropDownBorder"
							Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
							BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
							BorderThickness="1">
						<ScrollViewer x:Name="DropDownScrollViewer">
							<Grid x:Name="grid"
								  RenderOptions.ClearTypeHint="Enabled">
								<Canvas x:Name="canvas"
										HorizontalAlignment="Left"
										Height="0"
										VerticalAlignment="Top"
										Width="0">
									<Rectangle x:Name="opaqueRect"
											   Fill="{Binding Background, ElementName=dropDownBorder}"
											   Height="{Binding ActualHeight, ElementName=dropDownBorder}"
											   Width="{Binding ActualWidth, ElementName=dropDownBorder}" />
								</Canvas>
								<ItemsPresenter x:Name="ItemsPresenter"
												KeyboardNavigation.DirectionalNavigation="Contained"
												SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Grid>
						</ScrollViewer>
					</Border>
				</theme:SystemDropShadowChrome>
			</Popup>
			<ToggleButton x:Name="toggleButton"
						  Background="{TemplateBinding Background}"
						  BorderBrush="{TemplateBinding BorderBrush}"
						  BorderThickness="{TemplateBinding BorderThickness}"
						  Grid.ColumnSpan="2"
						  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
						  Style="{StaticResource ComboBoxToggleButton}" />
			<Border x:Name="border"
					Background="{StaticResource TextBox.Static.Background}"
					Margin="{TemplateBinding BorderThickness}">
				<TextBox x:Name="PART_EditableTextBox"
						 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
						 IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
						 Margin="{TemplateBinding Padding}"
						 Style="{StaticResource ComboBoxEditableTextBox}"
						 VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled"
					 Value="false">
				<Setter Property="Opacity"
						TargetName="border"
						Value="0.56" />
			</Trigger>
			<Trigger Property="IsKeyboardFocusWithin"
					 Value="true">
				<Setter Property="Foreground"
						Value="Black" />
			</Trigger>
			<Trigger Property="HasDropShadow"
					 SourceName="PART_Popup"
					 Value="true">
				<Setter Property="Margin"
						TargetName="shadow"
						Value="0,0,5,5" />
				<Setter Property="Color"
						TargetName="shadow"
						Value="#71000000" />
			</Trigger>
			<Trigger Property="HasItems"
					 Value="false">
				<Setter Property="Height"
						TargetName="dropDownBorder"
						Value="95" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping"
							   Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping"
							   Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll"
						Value="false" />
			</MultiTrigger>
			<Trigger Property="ScrollViewer.CanContentScroll"
					 SourceName="DropDownScrollViewer"
					 Value="false">
				<Setter Property="Canvas.Top"
						TargetName="opaqueRect"
						Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
				<Setter Property="Canvas.Left"
						TargetName="opaqueRect"
						Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="ComboBoxTemplate"
					 TargetType="{x:Type ComboBox}">
		<Grid x:Name="templateRoot"
			  SnapsToDevicePixels="true">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
								  Width="0" />
			</Grid.ColumnDefinitions>
			<Popup x:Name="PART_Popup"
				   AllowsTransparency="true"
				   Grid.ColumnSpan="2"
				   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
				   Margin="1"
				   Placement="Bottom"
				   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
				<theme:SystemDropShadowChrome x:Name="shadow"
											  Color="Transparent"
											  MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
											  MaxHeight="{TemplateBinding MaxDropDownHeight}">
					<Border x:Name="dropDownBorder"
							Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
							BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
							BorderThickness="1">
						<ScrollViewer x:Name="DropDownScrollViewer">
							<Grid x:Name="grid"
								  RenderOptions.ClearTypeHint="Enabled">
								<Canvas x:Name="canvas"
										HorizontalAlignment="Left"
										Height="0"
										VerticalAlignment="Top"
										Width="0">
									<Rectangle x:Name="opaqueRect"
											   Fill="{Binding Background, ElementName=dropDownBorder}"
											   Height="{Binding ActualHeight, ElementName=dropDownBorder}"
											   Width="{Binding ActualWidth, ElementName=dropDownBorder}" />
								</Canvas>
								<ItemsPresenter x:Name="ItemsPresenter"
												KeyboardNavigation.DirectionalNavigation="Contained"
												SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Grid>
						</ScrollViewer>
					</Border>
				</theme:SystemDropShadowChrome>
			</Popup>
			<ToggleButton x:Name="toggleButton"
						  Background="{TemplateBinding Background}"
						  BorderBrush="{TemplateBinding BorderBrush}"
						  BorderThickness="{TemplateBinding BorderThickness}"
						  Grid.ColumnSpan="2"
						  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
						  Style="{StaticResource ComboBoxToggleButton}" />
			<ContentPresenter x:Name="contentPresenter"
							  ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
							  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
							  Content="{TemplateBinding SelectionBoxItem}"
							  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
							  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							  IsHitTestVisible="false"
							  Margin="{TemplateBinding Padding}"
							  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasDropShadow"
					 SourceName="PART_Popup"
					 Value="true">
				<Setter Property="Margin"
						TargetName="shadow"
						Value="0,0,5,5" />
				<Setter Property="Color"
						TargetName="shadow"
						Value="#71000000" />
			</Trigger>
			<Trigger Property="HasItems"
					 Value="false">
				<Setter Property="Height"
						TargetName="dropDownBorder"
						Value="95" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping"
							   Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping"
							   Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll"
						Value="false" />
			</MultiTrigger>
			<Trigger Property="ScrollViewer.CanContentScroll"
					 SourceName="DropDownScrollViewer"
					 Value="false">
				<Setter Property="Canvas.Top"
						TargetName="opaqueRect"
						Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
				<Setter Property="Canvas.Left"
						TargetName="opaqueRect"
						Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="UniComboBoxStyle"
		   TargetType="{x:Type ComboBox}">
		<Setter Property="FocusVisualStyle"
				Value="{StaticResource FocusVisual}" />
		<Setter Property="Background"
				Value="{StaticResource ComboBox.Static.Background}" />
		<Setter Property="BorderBrush"
				Value="{StaticResource ComboBox.Static.Border}" />
		<Setter Property="Foreground"
				Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
				Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility"
				Value="Auto" />
		<Setter Property="Padding"
				Value="6,3,5,3" />
		<Setter Property="ScrollViewer.CanContentScroll"
				Value="true" />
		<Setter Property="ScrollViewer.PanningMode"
				Value="Both" />
		<Setter Property="Stylus.IsFlicksEnabled"
				Value="False" />
		<Setter Property="Template"
				Value="{StaticResource ComboBoxTemplate}" />
		<Style.Triggers>
			<Trigger Property="IsEditable"
					 Value="true">
				<Setter Property="IsTabStop"
						Value="false" />
				<Setter Property="Padding"
						Value="2" />
				<Setter Property="Template"
						Value="{StaticResource ComboBoxEditableTemplate}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="TabItemStyle1"
		   TargetType="{x:Type TabItem}">
		<Setter Property="FocusVisualStyle"
				Value="{StaticResource FocusVisual}" />
		<Setter Property="Foreground"
				Value="Black" />
		<Setter Property="Background"
				Value="{StaticResource TabItem.Static.Background}" />
		<Setter Property="BorderBrush"
				Value="{StaticResource TabItem.Static.Border}" />
		<Setter Property="Margin"
				Value="0" />
		<Setter Property="Padding"
				Value="6,2,6,2" />
		<Setter Property="HorizontalContentAlignment"
				Value="Stretch" />
		<Setter Property="VerticalContentAlignment"
				Value="Stretch" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabItem}">
					<Grid x:Name="templateRoot"
						  SnapsToDevicePixels="true">
						<Border x:Name="mainBorder"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="1,1,1,0"
								Margin="0">
							<Border x:Name="innerBorder"
									Background="{StaticResource TabItem.Selected.Background}"
									BorderBrush="{StaticResource TabItem.Selected.Border}"
									BorderThickness="1,1,1,0"
									Margin="-1"
									Opacity="0" />
						</Border>
						<ContentPresenter x:Name="contentPresenter"
										  ContentSource="Header"
										  Focusable="False"
										  HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
										  Margin="{TemplateBinding Padding}"
										  RecognizesAccessKey="True"
										  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										  VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
					</Grid>
					<ControlTemplate.Triggers>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
										   Value="true" />
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
										   Value="Left" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background"
									TargetName="mainBorder"
									Value="{StaticResource TabItem.MouseOver.Background}" />
							<Setter Property="BorderBrush"
									TargetName="mainBorder"
									Value="{StaticResource TabItem.MouseOver.Border}" />
							<Setter Property="BorderThickness"
									TargetName="innerBorder"
									Value="1,1,0,1" />
							<Setter Property="BorderThickness"
									TargetName="mainBorder"
									Value="1,1,0,1" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
										   Value="true" />
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
										   Value="Bottom" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background"
									TargetName="mainBorder"
									Value="{StaticResource TabItem.MouseOver.Background}" />
							<Setter Property="BorderBrush"
									TargetName="mainBorder"
									Value="{StaticResource TabItem.MouseOver.Border}" />
							<Setter Property="BorderThickness"
									TargetName="innerBorder"
									Value="1,0,1,1" />
							<Setter Property="BorderThickness"
									TargetName="mainBorder"
									Value="1,0,1,1" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
										   Value="true" />
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
										   Value="Right" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background"
									TargetName="mainBorder"
									Value="{StaticResource TabItem.MouseOver.Background}" />
							<Setter Property="BorderBrush"
									TargetName="mainBorder"
									Value="{StaticResource TabItem.MouseOver.Border}" />
							<Setter Property="BorderThickness"
									TargetName="innerBorder"
									Value="0,1,1,1" />
							<Setter Property="BorderThickness"
									TargetName="mainBorder"
									Value="0,1,1,1" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
										   Value="true" />
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
										   Value="Top" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background"
									TargetName="mainBorder"
									Value="{StaticResource TabItem.MouseOver.Background}" />
							<Setter Property="BorderBrush"
									TargetName="mainBorder"
									Value="{StaticResource TabItem.MouseOver.Border}" />
							<Setter Property="BorderThickness"
									TargetName="innerBorder"
									Value="1,1,1,0" />
							<Setter Property="BorderThickness"
									TargetName="mainBorder"
									Value="1,1,1,0" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
										   Value="false" />
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
										   Value="Left" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Opacity"
									TargetName="contentPresenter"
									Value="0.56" />
							<Setter Property="Background"
									TargetName="mainBorder"
									Value="{StaticResource TabItem.Disabled.Background}" />
							<Setter Property="BorderBrush"
									TargetName="mainBorder"
									Value="{StaticResource TabItem.Disabled.Border}" />
							<Setter Property="BorderThickness"
									TargetName="innerBorder"
									Value="1,1,0,1" />
							<Setter Property="BorderThickness"
									TargetName="mainBorder"
									Value="1,1,0,1" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
										   Value="false" />
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
										   Value="Bottom" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Opacity"
									TargetName="contentPresenter"
									Value="0.56" />
							<Setter Property="Background"
									TargetName="mainBorder"
									Value="{StaticResource TabItem.Disabled.Background}" />
							<Setter Property="BorderBrush"
									TargetName="mainBorder"
									Value="{StaticResource TabItem.Disabled.Border}" />
							<Setter Property="BorderThickness"
									TargetName="innerBorder"
									Value="1,0,1,1" />
							<Setter Property="BorderThickness"
									TargetName="mainBorder"
									Value="1,0,1,1" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
										   Value="false" />
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
										   Value="Right" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Opacity"
									TargetName="contentPresenter"
									Value="0.56" />
							<Setter Property="Background"
									TargetName="mainBorder"
									Value="{StaticResource TabItem.Disabled.Background}" />
							<Setter Property="BorderBrush"
									TargetName="mainBorder"
									Value="{StaticResource TabItem.Disabled.Border}" />
							<Setter Property="BorderThickness"
									TargetName="innerBorder"
									Value="0,1,1,1" />
							<Setter Property="BorderThickness"
									TargetName="mainBorder"
									Value="0,1,1,1" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
										   Value="false" />
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
										   Value="Top" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Opacity"
									TargetName="contentPresenter"
									Value="0.56" />
							<Setter Property="Background"
									TargetName="mainBorder"
									Value="{StaticResource TabItem.Disabled.Background}" />
							<Setter Property="BorderBrush"
									TargetName="mainBorder"
									Value="{StaticResource TabItem.Disabled.Border}" />
							<Setter Property="BorderThickness"
									TargetName="innerBorder"
									Value="1,1,1,0" />
							<Setter Property="BorderThickness"
									TargetName="mainBorder"
									Value="1,1,1,0" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}"
										   Value="false" />
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
										   Value="Left" />
							</MultiDataTrigger.Conditions>
							<Setter Property="BorderThickness"
									TargetName="innerBorder"
									Value="1,1,0,1" />
							<Setter Property="BorderThickness"
									TargetName="mainBorder"
									Value="1,1,0,1" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}"
										   Value="true" />
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
										   Value="Left" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Panel.ZIndex"
									Value="1" />
							<Setter Property="Margin"
									Value="-2,-2,0,-2" />
							<Setter Property="Opacity"
									TargetName="innerBorder"
									Value="1" />
							<Setter Property="BorderThickness"
									TargetName="innerBorder"
									Value="1,1,0,1" />
							<Setter Property="BorderThickness"
									TargetName="mainBorder"
									Value="1,1,0,1" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}"
										   Value="false" />
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
										   Value="Bottom" />
							</MultiDataTrigger.Conditions>
							<Setter Property="BorderThickness"
									TargetName="innerBorder"
									Value="1,0,1,1" />
							<Setter Property="BorderThickness"
									TargetName="mainBorder"
									Value="1,0,1,1" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}"
										   Value="true" />
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
										   Value="Bottom" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Panel.ZIndex"
									Value="1" />
							<Setter Property="Margin"
									Value="-2,0,-2,-2" />
							<Setter Property="Opacity"
									TargetName="innerBorder"
									Value="1" />
							<Setter Property="BorderThickness"
									TargetName="innerBorder"
									Value="1,0,1,1" />
							<Setter Property="BorderThickness"
									TargetName="mainBorder"
									Value="1,0,1,1" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}"
										   Value="false" />
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
										   Value="Right" />
							</MultiDataTrigger.Conditions>
							<Setter Property="BorderThickness"
									TargetName="innerBorder"
									Value="0,1,1,1" />
							<Setter Property="BorderThickness"
									TargetName="mainBorder"
									Value="0,1,1,1" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}"
										   Value="true" />
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
										   Value="Right" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Panel.ZIndex"
									Value="1" />
							<Setter Property="Margin"
									Value="0,-2,-2,-2" />
							<Setter Property="Opacity"
									TargetName="innerBorder"
									Value="1" />
							<Setter Property="BorderThickness"
									TargetName="innerBorder"
									Value="0,1,1,1" />
							<Setter Property="BorderThickness"
									TargetName="mainBorder"
									Value="0,1,1,1" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}"
										   Value="false" />
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
										   Value="Top" />
							</MultiDataTrigger.Conditions>
							<Setter Property="BorderThickness"
									TargetName="innerBorder"
									Value="1,1,1,0" />
							<Setter Property="BorderThickness"
									TargetName="mainBorder"
									Value="1,1,1,0" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}"
										   Value="true" />
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
										   Value="Top" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Panel.ZIndex"
									Value="1" />
							<Setter Property="Margin"
									Value="0,-2,0,0" />
							<Setter Property="Opacity"
									TargetName="innerBorder"
									Value="1" />
							<Setter Property="BorderThickness"
									TargetName="innerBorder"
									Value="1,1,1,0" />
							<Setter Property="BorderThickness"
									TargetName="mainBorder"
									Value="1,1,1,0" />
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion-->
	<!--#region UniBtnStyle-->
	<SolidColorBrush x:Key="Button.Static.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="Button.Static.Border"
					 Color="CornflowerBlue" />
	<SolidColorBrush x:Key="Button.MouseOver.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="Button.MouseOver.Border"
					 Color="BlueViolet" />
	<SolidColorBrush x:Key="Button.Pressed.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="Button.Pressed.Border"
					 Color="Violet" />
	<SolidColorBrush x:Key="Button.Disabled.Background"
					 Color="CadetBlue" />
	<SolidColorBrush x:Key="Button.Disabled.Border"
					 Color="#FFADB2B5" />
	<SolidColorBrush x:Key="Button.Disabled.Foreground"
					 Color="Black" />
	<Style x:Key="UniBtnStyle"
		   TargetType="{x:Type Button}">
		<Setter Property="FocusVisualStyle"
				Value="{StaticResource FocusVisual}" />
		<Setter Property="Background"
				Value="{StaticResource Button.Static.Background}" />
		<Setter Property="BorderBrush"
				Value="{StaticResource Button.Static.Border}" />
		<Setter Property="Foreground"
				Value="White" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="HorizontalContentAlignment"
				Value="Center" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="Padding"
				Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Border x:Name="border"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="true">
						<ContentPresenter x:Name="contentPresenter"
										  Focusable="False"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  Margin="{TemplateBinding Padding}"
										  RecognizesAccessKey="True"
										  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="Button.IsDefaulted"
								 Value="true">
							<Setter Property="BorderBrush"
									TargetName="border"
									Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
						</Trigger>
						<Trigger Property="IsMouseOver"
								 Value="true">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<ColorAnimation Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)"
														To="BlueViolet"
														Duration="0:0:0.1" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<ColorAnimation Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)"
														To="CornflowerBlue"
														Duration="0:0:0.05" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
							<Setter Property="Background"
									TargetName="border"
									Value="{StaticResource Button.MouseOver.Background}" />
						</Trigger>
						<Trigger Property="IsPressed"
								 Value="true">
							<Setter Property="Background"
									TargetName="border"
									Value="{StaticResource Button.Pressed.Background}" />
							<Setter Property="BorderBrush"
									TargetName="border"
									Value="{StaticResource Button.Pressed.Border}" />
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Background"
									TargetName="border"
									Value="{StaticResource Button.Disabled.Background}" />
							<Setter Property="BorderBrush"
									TargetName="border"
									Value="{StaticResource Button.Disabled.Border}" />
							<Setter Property="TextElement.Foreground"
									TargetName="contentPresenter"
									Value="{StaticResource Button.Disabled.Foreground}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="DelBtnStyle"
		   TargetType="{x:Type Button}">
		<Setter Property="FocusVisualStyle"
				Value="{StaticResource FocusVisual}" />
		<Setter Property="Background"
				Value="{StaticResource Button.Static.Background}" />
		<Setter Property="BorderBrush"
				Value="{StaticResource Button.Static.Border}" />
		<Setter Property="Foreground"
				Value="White" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="HorizontalContentAlignment"
				Value="Center" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="Padding"
				Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Border x:Name="border"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="true">
						<ContentPresenter x:Name="contentPresenter"
										  Focusable="False"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  Margin="{TemplateBinding Padding}"
										  RecognizesAccessKey="True"
										  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="Button.IsDefaulted"
								 Value="true">
							<Setter Property="BorderBrush"
									TargetName="border"
									Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
						</Trigger>
						<Trigger Property="IsMouseOver"
								 Value="true">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<ColorAnimation Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)"
														To="Red"
														Duration="0:0:0.1" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<ColorAnimation Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)"
														To="DarkRed"
														Duration="0:0:0.05" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
							<Setter Property="Background"
									TargetName="border"
									Value="{StaticResource Button.MouseOver.Background}" />
						</Trigger>
						<Trigger Property="IsPressed"
								 Value="true">
							<Setter Property="Background"
									TargetName="border"
									Value="Red" />
							<Setter Property="BorderBrush"
									TargetName="border"
									Value="{StaticResource Button.Pressed.Border}" />
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Background"
									TargetName="border"
									Value="{StaticResource Button.Disabled.Background}" />
							<Setter Property="BorderBrush"
									TargetName="border"
									Value="{StaticResource Button.Disabled.Border}" />
							<Setter Property="TextElement.Foreground"
									TargetName="contentPresenter"
									Value="{StaticResource Button.Disabled.Foreground}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion-->
	<!--#region UniTextBoxStyle-->
	<SolidColorBrush x:Key="TextBox.Static.Border"
					 Color="CornflowerBlue" />
	<SolidColorBrush x:Key="TextBox.MouseOver.Border"
					 Color="#FF7EB4EA" />
	<SolidColorBrush x:Key="TextBox.Focus.Border"
					 Color="#FF569DE5" />
	<Style x:Key="UniTextBoxStyle"
		   TargetType="{x:Type TextBox}">
		<Setter Property="CaretBrush"
				Value="Wheat" />
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="BorderBrush"
				Value="{StaticResource TextBox.Static.Border}" />
		<Setter Property="Foreground"
				Value="White" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="KeyboardNavigation.TabNavigation"
				Value="None" />
		<Setter Property="HorizontalContentAlignment"
				Value="Left" />
		<Setter Property="FocusVisualStyle"
				Value="{x:Null}" />
		<Setter Property="AllowDrop"
				Value="true" />
		<Setter Property="ScrollViewer.PanningMode"
				Value="VerticalFirst" />
		<Setter Property="Stylus.IsFlicksEnabled"
				Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBoxBase}">
					<Border x:Name="border"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="True">
						<ScrollViewer x:Name="PART_ContentHost"
									  Focusable="false"
									  HorizontalScrollBarVisibility="Hidden"
									  VerticalScrollBarVisibility="Hidden" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Opacity"
									TargetName="border"
									Value="0.56" />
						</Trigger>
						<Trigger Property="IsMouseOver"
								 Value="true">
							<Setter Property="BorderBrush"
									TargetName="border"
									Value="{StaticResource TextBox.MouseOver.Border}" />
						</Trigger>
						<Trigger Property="IsKeyboardFocused"
								 Value="true">
							<Setter Property="BorderBrush"
									TargetName="border"
									Value="{StaticResource TextBox.Focus.Border}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsInactiveSelectionHighlightEnabled"
							   Value="true" />
					<Condition Property="IsSelectionActive"
							   Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="SelectionBrush"
						Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
			</MultiTrigger>
		</Style.Triggers>
	</Style>
	<!--#endregion-->

	<converter:ListTextBoxWidthConverter x:Key="LTBWConverter" />
</ResourceDictionary>